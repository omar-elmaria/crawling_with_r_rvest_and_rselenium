data.frame(rating_score_raw)
# str_trim
# data.frame(rating_score)
# Pacman is a library that allows you to install several packages in one line of code instead of using install.packages("...")
if (system.file(package = "pacman") == "") {
install.packages("pacman")
}
pacman::p_load(rvest, httr, dplyr, ggplot2, stringr)
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_trim(.)
rating_score_raw
# data.frame(rating_score)
data.frame(rating_score_raw)
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract_all(string = ., pattern = "\d+\/\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract_all(string = ., pattern = "/d+\//d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract_all(string = ., pattern = "/d+///d+") # This regex extracts any part of the string that matches this pattern "number/number"
# N.B. To try out regex patterns and see how they extract certain parts of a string, use this website --> https://regex101.com/
# We can also calculate the rating as a **percentage**
# To do that, we will need to extract the first and second parts of the rating score and divide them by each other
# Extract the **first** part of the rating score
rating_score_pct_p1 <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract_all(string = ., pattern = "\d+(?=\/\d+)") # The regex here is --> extract any digit **before** a division sign "/" followed by numbers
rating_score_raw
?str_extract_all
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract_all(string = ., pattern = "\d+\\/\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract_all(string = ., pattern = "/d+\\//d+") # This regex extracts any part of the string that matches this pattern "number/number"
rating_score_raw
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "/d+\\//d+") # This regex extracts any part of the string that matches this pattern "number/number"
rating_score_raw
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\d+\\/\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\d") # This regex extracts any part of the string that matches this pattern "number/number"
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "/d") # This regex extracts any part of the string that matches this pattern "number/number"
rating_score_raw
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "/d+") # This regex extracts any part of the string that matches this pattern "number/number"
rating_score_raw
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract_all(string = ., pattern = "/d+") # This regex extracts any part of the string that matches this pattern "number/number"
rating_score_raw
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\\d+\\/\\d+") # This regex extracts any part of the string that matches this pattern "number/number"
rating_score_raw
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\\d+\\/\\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Note 1: To try out regex patterns and see how they extract certain parts of a string, use this website --> https://regex101.com/
# Note 2: The second page of this PDF (https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf) contains a handy cheat sheet for regex
# Note 3: In R, you need to escape any backslash with another backslash. This is not needed on the website, so the expression above would be "\d+\/\d+"
# We can also calculate the rating as a **percentage**
# To do that, we will need to extract the first and second parts of the rating score and divide them by each other
# Extract the **first** part of the rating score
rating_score_pct_p1 <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\d+(?=\\/\\d+)") # The regex here is --> extract any digit **before** a division sign "/" followed by numbers
# Extract the **second** part of the rating score
rating_score_pct_p2 <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\/)\\d+") # The regex here is --> extract any digit **after** the division sign
# Now, combine both parts to calculate a percentage
rating_score_pct <- round(rating_score_pct_p1 / rating_score_pct_p2, 4)
rating_score_pct_p1
rating_score_pct_p2
# Now, combine both parts to calculate a percentage
rating_score_pct <- tryCatch(
{
round(rating_score_pct_p1 / rating_score_pct_p2, 4)
},
error=function(cond) {
message(cond)
return(NA)
}
)
data.frame(rating_score_raw, rating_score_pct)
rating_score_pct_p1
rating_score_pct_p2
round(rating_score_pct_p1[0] / rating_score_pct_p2[0], 4)
round(rating_score_pct_p1[1] / rating_score_pct_p2[1], 4)
rating_score_pct_p1[1]
# Now, combine both parts to calculate a percentage
rating_score_pct <- round(as.integer(rating_score_pct_p1) / as.integer(rating_score_pct_p2), 4)
data.frame(rating_score_raw, rating_score_pct)
# Extract the **first** part of the rating score
rating_score_pct_p1 <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\d+(?=\\/\\d+)") %>% # The regex here is --> extract any digit **before** a division sign "/" followed by numbers
as.integer(.)
# Extract the **second** part of the rating score
rating_score_pct_p2 <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\/)\\d+") %>% # The regex here is --> extract any digit **after** the division sign
as.integer(.)
# Now, combine both parts to calculate a percentage. Remember to convert the
rating_score_pct <- round(rating_score_pct_p1 / rating_score_pct_p2, 4)
data.frame(rating_score_raw, rating_score_pct)
# Dump the crawled data into a data frame so that it can be cleaned and formatted
df <- data.frame(product_title, product_name, product_url, rating_score_raw, rating_score_pct)
View(df)
reviewer <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "[a-zA-Z]") # This regex extracts any part of the string that matches this pattern "number/number"
reviewer
reviewer <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract_all(string = ., pattern = "[a-zA-Z]") # This regex extracts any part of the string that matches this pattern "number/number"
reviewer
reviewer <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "[a-zA-Z]+") # This regex extracts any part of the string that matches this pattern "number/number"
reviewer
# 5. reviewer
reviewer <- page %>%
html_nodes("p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "[a-zA-Z]+") # This regex extracts any characters in the string (lowercase or uppercase)
reviewer
# 8. price
price <- page %>%
html_nodes(css = "span.price") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\d+")
price
# 8. price
price <- page %>%
html_nodes(css = "span.price") %>%
html_text(trim = TRUE)
price
# 8. price
price <- page %>%
html_nodes(css = "span.price") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=CHF\s).*") %>% # This regex extracts any alphanumeric character **after** (CHF )
# 8. price
price <- page %>%
html_nodes(css = "span.price") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=CHF\\s).*") %>% # This regex extracts any alphanumeric character **after** (CHF )
as.numeric(.)
price
# Dump the crawled data into a data frame so that it can be cleaned and formatted
df <- data.frame(product_title, product_name, product_url, rating_score_raw, rating_score_pct, reviewer, price)
price[price != 0]
# Sometimes, a price of "zero" is crawled. Remove it from the vector
price <- price[price != 0]
# Dump the crawled data into a data frame so that it can be cleaned and formatted
df <- data.frame(product_title, product_name, product_url, rating_score_raw, rating_score_pct, reviewer, price)
View(df)
# 9. image_url
image_url <- page %>%
html_nodes(css = "img.product-image-photo") %>%
html_attr("src")
image_url
# 10. is_new
is_new <- page %>%
html_nodes(css = "span.new.small") %>%
html_text(trim = TRUE)
is_new
is_new <- page %>%
html_nodes(css = "span.new.small")
is_new
# 10. is_new
is_new <- page %>%
html_nodes(css = "span.new small") %>%
html_text(trim = TRUE)
is_new
# 10. is_new
is_new <- page %>%
html_nodes(css = "span.new.small") %>%
html_text(trim = TRUE)
# 10. is_new
is_new <- page %>%
html_nodes(css = "div.flags > p > span") %>%
html_text(trim = TRUE)
is_new
# Dump the crawled data into a data frame so that it can be cleaned and formatted
df <- data.frame(product_title, product_name, product_url, rating_score_raw, rating_score_pct, reviewer, price, image_url, is_new)
?data.frame
# 10. is_new
is_new <- page %>%
html_node(css = "span.new.small") %>%
html_text(trim = TRUE)
is_new
# 10. is_new
is_new <- page %>%
html_nodes(css = "span.new.small") %>%
html_text()
is_new
# 1. product_title
product_title <- page %>%
html_nodes(css = "span.product-name-1") %>%
html_text(trim = TRUE)
# 2. product_name
# The product_name is split into two parts. Crawl them separately, then combine them into one variable
product_name_p1 <- page %>%
html_nodes(css = "p.product-name > span.product-name-part:first-child") %>%
html_text(trim = TRUE)
product_name_p2 <- page %>%
html_nodes(css = "p.product-name > span.product-name-part:nth-child(2)") %>%
html_text(trim = TRUE)
# Now, combine the two parts together using the paste0 function
product_name <- paste0(product_name_p1, " ", product_name_p2)
# 3. product_url
product_url <- page %>%
html_nodes(css = "h2.product-name > a") %>% # Use a CSS or an XPATH selector here
html_attr("href") # ... then extract an attribute or the text. All the other crawled fields follow the same format
# 4. rating_score
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\\d+\\/\\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Note 1: To try out regex patterns and see how they extract certain parts of a string, use this website --> https://regex101.com/
# Note 2: The second page of this PDF (https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf) contains a handy cheat sheet for regex
# Note 3: In R, you need to escape any backslash with another backslash. This is not needed on the website, so the expression above would be "\d+\/\d+"
# We can also calculate the rating as a **percentage**
# To do that, we will need to extract the first and second parts of the rating score and divide them by each other
# Extract the **first** part of the rating score
rating_score_pct_p1 <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\d+(?=\\/\\d+)") %>% # The regex here is --> extract any digit **before** a division sign "/" followed by numbers
as.integer(.) # Remember to convert the string to an integer
# Extract the **second** part of the rating score
rating_score_pct_p2 <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\/)\\d+") %>% # The regex here is --> extract any digit **after** the division sign
as.integer(.)
# Now, combine both parts to calculate a percentage
rating_score_pct <- round(rating_score_pct_p1 / rating_score_pct_p2, 4)
# 5. reviewer
reviewer <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "[a-zA-Z]+") # This regex extracts any characters from A-Z in the string (lowercase or uppercase)
# 6. country
country <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\w+(?=\\s\\|)") # This regex extracts any word characters **before** " |"
# 1. product_title
product_title <- page %>%
html_nodes(css = "span.product-name-1") %>%
html_text(trim = TRUE)
# 2. product_name
# The product_name is split into two parts. Crawl them separately, then combine them into one variable
product_name_p1 <- page %>%
html_nodes(css = "p.product-name > span.product-name-part:first-child") %>%
html_text(trim = TRUE)
product_name_p2 <- page %>%
html_nodes(css = "p.product-name > span.product-name-part:nth-child(2)") %>%
html_text(trim = TRUE)
# Now, combine the two parts together using the paste0 function
product_name <- paste0(product_name_p1, " ", product_name_p2)
# 3. product_url
product_url <- page %>%
html_nodes(css = "h2.product-name > a") %>% # Use a CSS or an XPATH selector here
html_attr("href") # ... then extract an attribute or the text. All the other crawled fields follow the same format
# 4. rating_score
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\\d+\\/\\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Note 1: To try out regex patterns and see how they extract certain parts of a string, use this website --> https://regex101.com/
# Note 2: The second page of this PDF (https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf) contains a handy cheat sheet for regex
# Note 3: In R, you need to escape any backslash with another backslash. This is not needed on the website, so the expression above would be "\d+\/\d+"
# We can also calculate the rating as a **percentage**
# To do that, we will need to extract the first and second parts of the rating score and divide them by each other
# Extract the **first** part of the rating score
rating_score_pct_p1 <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\d+(?=\\/\\d+)") %>% # The regex here is --> extract any digit **before** a division sign "/" followed by numbers
as.integer(.) # Remember to convert the string to an integer
# Extract the **second** part of the rating score
rating_score_pct_p2 <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\/)\\d+") %>% # The regex here is --> extract any digit **after** the division sign
as.integer(.)
# Now, combine both parts to calculate a percentage
rating_score_pct <- round(rating_score_pct_p1 / rating_score_pct_p2, 4)
# 5. reviewer
reviewer <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "[a-zA-Z]+") # This regex extracts any characters from A-Z in the string (lowercase or uppercase)
# 6. country
country <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\w+(?=\\s\\|)") # This regex extracts any word characters **before** " |"
# 7. city
city <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\|\s)\w+") # This regex extracts any word characters **after** "| "
# 1. product_title
product_title <- page %>%
html_nodes(css = "span.product-name-1") %>%
html_text(trim = TRUE)
# 2. product_name
# The product_name is split into two parts. Crawl them separately, then combine them into one variable
product_name_p1 <- page %>%
html_nodes(css = "p.product-name > span.product-name-part:first-child") %>%
html_text(trim = TRUE)
product_name_p2 <- page %>%
html_nodes(css = "p.product-name > span.product-name-part:nth-child(2)") %>%
html_text(trim = TRUE)
# Now, combine the two parts together using the paste0 function
product_name <- paste0(product_name_p1, " ", product_name_p2)
# 3. product_url
product_url <- page %>%
html_nodes(css = "h2.product-name > a") %>% # Use a CSS or an XPATH selector here
html_attr("href") # ... then extract an attribute or the text. All the other crawled fields follow the same format
# 4. rating_score
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\\d+\\/\\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Note 1: To try out regex patterns and see how they extract certain parts of a string, use this website --> https://regex101.com/
# Note 2: The second page of this PDF (https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf) contains a handy cheat sheet for regex
# Note 3: In R, you need to escape any backslash with another backslash. This is not needed on the website, so the expression above would be "\d+\/\d+"
# We can also calculate the rating as a **percentage**
# To do that, we will need to extract the first and second parts of the rating score and divide them by each other
# Extract the **first** part of the rating score
rating_score_pct_p1 <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\d+(?=\\/\\d+)") %>% # The regex here is --> extract any digit **before** a division sign "/" followed by numbers
as.integer(.) # Remember to convert the string to an integer
# Extract the **second** part of the rating score
rating_score_pct_p2 <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\/)\\d+") %>% # The regex here is --> extract any digit **after** the division sign
as.integer(.)
# Now, combine both parts to calculate a percentage
rating_score_pct <- round(rating_score_pct_p1 / rating_score_pct_p2, 4)
# 5. reviewer
reviewer <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "[a-zA-Z]+") # This regex extracts any characters from A-Z in the string (lowercase or uppercase)
# 6. country
country <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\w+(?=\\s\\|)") # This regex extracts any word characters **before** " |"
# 7. city
city <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\|\\s)\w+") # This regex extracts any word characters **after** "| "
# 6. country
country <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\w+(?=\\s\|)") # This regex extracts any word characters **before** " |"
# 6. country
country <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\w+(?=\\s\\|)") # This regex extracts any word characters **before** " |"
country
# 7. city
city <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\|\\s)\w+") # This regex extracts any word characters **after** "| "
# 7. city
city <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\|\\s)\\w+") # This regex extracts any word characters **after** "| "
city
# 1. product_title
product_title <- page %>%
html_nodes(css = "span.product-name-1") %>%
html_text(trim = TRUE)
# 2. product_name
# The product_name is split into two parts. Crawl them separately, then combine them into one variable
product_name_p1 <- page %>%
html_nodes(css = "p.product-name > span.product-name-part:first-child") %>%
html_text(trim = TRUE)
product_name_p2 <- page %>%
html_nodes(css = "p.product-name > span.product-name-part:nth-child(2)") %>%
html_text(trim = TRUE)
# Now, combine the two parts together using the paste0 function
product_name <- paste0(product_name_p1, " ", product_name_p2)
# 3. product_url
product_url <- page %>%
html_nodes(css = "h2.product-name > a") %>% # Use a CSS or an XPATH selector here
html_attr("href") # ... then extract an attribute or the text. All the other crawled fields follow the same format
# 4. rating_score
# Raw rating score as a string. It could be out of 100 or out of 20
rating_score_raw <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>% # trim = TRUE removes any carriage returns or unwanted white space
str_extract(string = ., pattern = "\\d+\\/\\d+") # This regex extracts any part of the string that matches this pattern "number/number"
# Note 1: To try out regex patterns and see how they extract certain parts of a string, use this website --> https://regex101.com/
# Note 2: The second page of this PDF (https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf) contains a handy cheat sheet for regex
# Note 3: In R, you need to escape any backslash with another backslash. This is not needed on the website, so the expression above would be "\d+\/\d+"
# We can also calculate the rating as a **percentage**
# To do that, we will need to extract the first and second parts of the rating score and divide them by each other
# Extract the **first** part of the rating score
rating_score_pct_p1 <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\d+(?=\\/\\d+)") %>% # The regex here is --> extract any digit **before** a division sign "/" followed by numbers
as.integer(.) # Remember to convert the string to an integer
# Extract the **second** part of the rating score
rating_score_pct_p2 <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\/)\\d+") %>% # The regex here is --> extract any digit **after** the division sign
as.integer(.)
# Now, combine both parts to calculate a percentage
rating_score_pct <- round(rating_score_pct_p1 / rating_score_pct_p2, 4)
# 5. reviewer
reviewer <- page %>%
html_nodes(css = "p.rating-score") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "[a-zA-Z]+") # This regex extracts any characters from A-Z in the string (lowercase or uppercase)
# 6. country
country <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "\\w+(?=\\s\\|)") # This regex extracts any word characters **before** " |"
# 7. city
city <- page %>%
html_nodes(css = "p.cellar-name") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=\\|\\s)\\w+") # This regex extracts any word characters **after** "| "
# 8. price
price <- page %>%
html_nodes(css = "span.price") %>%
html_text(trim = TRUE) %>%
str_extract(string = ., pattern = "(?<=CHF\\s).*") %>% # This regex extracts any alphanumeric character **after** (CHF )
as.numeric(.)
# Sometimes, a price of "zero" is crawled. Remove it from the vector
price <- price[price != 0]
# 9. image_url
image_url <- page %>%
html_nodes(css = "img.product-image-photo") %>%
html_attr("src")
# Dump the crawled data into a data frame so that it can be cleaned and formatted
df <- data.frame(product_title, product_name, product_url, rating_score_raw, rating_score_pct, reviewer, price, image_url)
